{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Practicalli Amazon Web Services (AWS)","text":"<p>Amazon web services are an ever increasing and evolving set of Cloud services to support a wide range of deployment requirements for custom software services.  AWS also includes a growing number of off-the-shelf services, especially in the realm of data science.</p> <p>Practicalli content focuses on tools and services the team has used for commercial projects, so will not cover all services offered</p> Localstack provides AWS services locally <p>Use Localstack instead of creating an account if only using the services locally.</p> <p>Localstack implements many of the AWS services, although some services are only commercially available</p>"},{"location":"#getting-started","title":"Getting Started","text":"Personal projectsCommercial projects <p> Setup Root and IAM accounts</p> <ul> <li>Find a valid credit / debit card needed to create the account (temporary $1 charge)</li> <li>Create a root account for to administer the overall AWS account</li> <li>Create an IAM account with Management Console login for working with AWS services</li> <li>Create an IAM account for services to access AWS (non-login)</li> </ul> <p>Ask the AWS administrator within the organisation to create an IAM user fs</p> <p>Specify the access required or identify a colleague that has the same AWS access required</p> <p> Install AWS CLI version 2</p> <p> Configure access via the IAM account</p> <p>Start Hacking</p>"},{"location":"#resources","title":"Resources","text":"<p>Practicalli Books and Videos Practicalli YouTube channel</p> <p>Getting Started with AWS AWS Developer Center</p> <p>AWS Regions and Availability Zones map</p> <p>AWS Region Names</p> <p>AWS Architecture Center Kindle Architecture white-papers</p>"},{"location":"#navigate-the-book","title":"Navigate the book","text":"<p>Use the mouse or built-in key bindings to navigate the pages of the book</p> <ul> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>Use the search box to quickly find a specific topic</p> <ul> <li>F , S , / : open search dialog</li> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search dialog</li> <li>Enter : follow selected result</li> </ul>"},{"location":"#sponsor-practicalli","title":"Sponsor Practicalli","text":"<p>All sponsorship recieved is used to maintain and further develop the Practicalli series of books and videos, although most of the work is still done with my own time and cost.</p> <p>Thank you to Cognitect, Nubank and a wide range of other sponsors from the Clojure community for your continued support</p>"},{"location":"#creative-commons-license","title":"Creative commons license","text":"This work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images &amp; stylesheets)."},{"location":"account/","title":"AWS Accounts","text":"<p>An account is required to use AWS services</p> <ul> <li>Root account - general adminstration of the overall AWS account, including management of IAM accounts</li> <li>IAM account - daily use account, either for humans or code/scripts/command line access</li> </ul> <p>Engineers and systems should use an IAM account</p> <p>Only persons responsible for administrating the whole AWS account should login via the root account and only when carrying out administrative duties.</p>"},{"location":"account/#root-account-requirements","title":"Root Account Requirements","text":"<p>A credit card is required to create a Root account and a temporary change of $1 is made, which is returned within 3-5 days.</p>"},{"location":"account/#local-configuration","title":"Local configuration","text":"<p>Copy the ARN value for the new user</p> <p>arn:aws:iam::184444675381:user/jr0cket-cli</p>"},{"location":"account/iam-identity-center/","title":"IAM Identity Center","text":"<p>Email confirmation may not arrive</p> <p>Dont wait for an email to say that the Identity Center is ready, it may never come.  Practicalli never recieved an email.</p> <p>IAM Identity Center can manage accounts and provide credentials to enable access to AWS services.</p> <p>Use Identity Center to manage IAM user accounts and groups in its own directory.  Or use accounts managed via an external identity provider, e.g.</p> <ul> <li>Microsoft Active Directory Domain Services</li> <li>Okta Universal Directory</li> <li>Microsoft Azure AD</li> </ul> <p> AWS Docs - IAM Identity Center - Getting Started</p> IAM Identity Center is has no charge IAM Identity Center replaces the AWS Single Sign-on service"},{"location":"account/iam-identity-center/#requirements","title":"Requirements","text":"<p>AWS Organisation is required for IAM Identity Center. An Organisation can be created when enabling the AWS IAM Identity Center</p> <p>Existing IAM accounts should be well within  quota limits</p>"},{"location":"account/iam-identity-center/#enable-iam-identity-center","title":"Enable IAM Identity Center","text":"<p>Sign in to AWS Management Console using the Root user account</p> <p>Search for and select the IAM Identity Center</p> <p></p> <p>Select Enable button on the IAM Identity Center page</p> <p></p> <p>IAM Identity Center requires AWS Organizations.</p> <p></p> <p>Select Create AWS organization or choose and existing organisation</p> <p></p> <p>AWS Organizations automatically sends a verification email to the address that is associated with your management account. There might be a delay before you receive the verification email. Verify your email address within 24 hours.</p>"},{"location":"account/iam-identity-center/#choose-your-identity-source","title":"Choose your identity source","text":"<p>Your identity source in IAM Identity Center defines where your users and groups are managed. You can choose one of the following as your identity source:</p> <p>Identity Center directory \u2013 When you enable IAM Identity Center for the first time, it is automatically configured with an Identity Center directory as your default identity source. This is where you create your users and groups, and assign their level of access to your AWS accounts and applications.</p>"},{"location":"account/iam-identity-center/#integrate-with-aws-cli","title":"Integrate with AWS CLI","text":"<p>Sign-in using the credentials defined in IAM Identity Center or external identity provider</p> <p>Use Named role profiles in AWS CLI configuration to run commands in desired accounts and roles.</p> <p>AWS CLI manages short-term credentials automatically so developers can start in and stay in the CLI securely without interruption, and run long running scripts</p> <p>Configure AWS CLI for AWS IMA Identity Center Integrate AWS CLI with IAM Identity Center</p>"},{"location":"account/iam-identity-center/#terminology","title":"Terminology","text":"<ul> <li>Workforce identities: human users</li> </ul> <p>AWS IAM Identity Center quotas</p> <p>Not relevant for IAM Identity Center</p> <p>AWS Resources Search</p> <p>Type /Resources (forward slash) to focus search results on resources such as EC2 instances, S3 buckets, and more.</p>"},{"location":"account/iam/","title":"IAM Account","text":""},{"location":"account/iam/#create-iam-account","title":"Create IAM Account","text":"<p>Visit aws.amazon.com in a browser.</p> <p>Sign In via the link in the top navigation bar, or select Create an AWS Account</p> <p>Login using the Root account which is typically used to administrate all other accounts.</p> <p>Search for  Identity and Access Management (IAM)</p> <p>Select IAM &gt; Users</p> <p>Select Add User</p> <p>Step 1: - Enter user name <code>jr0cket-cli</code> - Select Next</p> <p>do not provide access to the AWS management console for programmatic users</p> <p>Step 2:</p> <ul> <li>Select Create Group</li> <li>enter user group name, e.g. <code>cli-access</code></li> <li>search for Permission Policies, e.g. <code>s3</code></li> <li>select checkbox next to relevant permission, e.g. <code>AmazonS3FullAccess</code></li> <li>Select Next</li> </ul> <p>Step 3: - Select Create User</p> <p>View the user to see th user passwork and email instructions for signing into the AWS Management Console (which we didnt select, so that seems to be a generic message)</p>"},{"location":"account/iam/#configure-cli-access","title":"Configure CLI Access","text":"<ul> <li>Access Keys for personal AWS Account (you are the owner of the whole account, not for commercial account)</li> <li>SSO &amp; IAM Identity Center for commercial accounts</li> </ul> <p>Most other operations seem redundant</p> <p>AWS CloudShell</p> <p>AWS CloudShell is a browser-based CLI for running commands.</p> <p>Essentially an Amazon Linux environment running in the AWS environment which can be connected to run commands</p> <p>assumption: code will need to be run in the Cloudshell environment to use the credentials or use a supported editor - VSCode or IntelliJ</p> Access Keys <p>Access Keys have a maximum 12 hours lifespan (assumption: can be regenerated via the web console)</p> <p>Scroll to Access Keys section in IAM user view</p> <p>Select Create access keybinding</p> <p>Step 1 - Access key best practices and alternatives Select Command Line Interface (CLI)</p> <p>AWS form prompts with alternative recommendation (which should be used instead of this approach)</p> <p>Alternatives recommended</p> <p>Use AWS CloudShell, a browser-based CLI, to run commands</p> <p>Use the AWS CLI V2 and enable authentication through a user in IAM Identity Center (SSO)</p> <p>Check I understand the above recommendation and want to proceed to create an access key</p> <p>Step 2 - set description tag: Optionally set a tag (maybe this helps search for things or provide some content about how the key is used)</p> <p>Select Create access key</p> <p>Step 3 - retrieve access keys Copy the Access Key and Secret access key to somewhere safe, e.g. a local GPG encrypted file</p> <p>Keep the page open and open a command line terminal to run the AWS CLI configuration wizard.</p> <p>If running the aws cli config later, create a file called <code>~/.aws/access-keys.gpg</code>, add the Access Key and Secret Access Key and encrypt the file, e.g. <code>SPC a Y e</code> in spacemace, selecting a GPG key.</p> <p> Recommended Practices for Access Keys</p> <p>aws_session_token not required</p> <p>The IAM user should be part of an AWS group and that group should be assigned the relevant service permissions, e.g. <code>AwsS3FullAccess</code></p> <p>An AWS group can be created or assigne when creating a new IAM user or anytime after the user is created.</p>"},{"location":"account/root/","title":"Root account","text":"<p>A root account is used for administration of an Amazon Web Service (AWS) account. This includes management of IAM accounts which are used for day to day work and programmatic (code) access.</p> Credit / Debit card required <p>A working credit card is required to setup a root account and AWS will charge the card $1 to verify identity and that the card is legitimate.  This amount will be returned within 3-5 days.</p> <p>Apart from the temporary charge, this approach should not incur any charges so long as the account stays within the free plan limits.  Recommend using a digital card that can be set to frozen when not explicitly used as a safety precaution.</p>"},{"location":"account/root/#create-root-account","title":"Create root account","text":"<p>Create a root account by singing up for AWS</p> <p>Enter an email for the root account and a name for the AWS account</p> <p></p> <p>An email is sent to the address entered with a verification code.  Enter the code and select Verify</p> <p></p> <p>Generate a secure password for the root account, e.g. using a Password Manager such as NordPass or 1Password</p> <p></p> <p>Save the account password with your favourite password manager</p> <p>Select Personal plan as this account is only used for personal projects &amp; hacking (not cracking).</p> <p>Complete contact information with your actual details (used when AWS confirms the credit card is legitimate) and confirm the AWS Customer Agreement.</p> <p></p> <p>Enter details of a valid credit/debit card.  AWS will charge $1 to the card, which will be returned in 3-5 days.</p> <p></p> <p>Confirm identity</p> <p>NOTE: do not include spaces in the security code even if they are in the image</p> <p>Select Send SMS</p> <p></p> <p>Confirm identity pin number</p> <p>4 digit code (dont use the 5 digit phone number by mistake)</p> <p></p> <p>Select support plan - Basic support - Free</p> <p>Select Complete Sign up</p> <p></p> <p>Congratulations</p> <p>An email will be sent to the root account address once the account is ready, which make take a few minutes.</p> <p>Take a break from the form filling by stretching and taking some deep breaths.</p> <p></p>"},{"location":"account/root/#multi-factor-authentication","title":"Multi-factor authentication","text":"<p>Visit the IAM dashboard and assign Multi-Factor authentication (MFA) to the root user account for additional security.</p> <p>Select Assign MFA</p> <p></p> <p>Specify MFA device name and select MFA device</p> <p>Authy Authentication App</p> <p>Practicalli uses the Authy app to generate Multi-Factor authentication codes for all services</p> <p></p> <p>Set up authenticator app</p> <p></p> <p>The MFA device is now assigned</p> <p></p>"},{"location":"assets/images/social/","title":"Social Cards","text":"<p>Social Cards are visual previews of the website that are included when sending links via social media platforms.</p> <p>Material for MkDocs is configured to generate beautiful social cards automatically, using the colors, fonts and logos defined in <code>mkdocs.yml</code></p> <p>Generated images are stored in this directory.</p>"},{"location":"clojure/","title":"Clojure with Amazon Web Services","text":"<p>Cognitect Labs AWS API</p> <p>Amazonica</p>"},{"location":"clojure/amazonica/","title":"Amazonica","text":"<p>Very Rough Draft</p> <p></p> <p>A comprehensive Clojure client for the entire [Amazon AWS API][1], essentially a wrapper acound the Java client library for AWS.</p> <p></p> <p>Examples in Amazonica project readme not working</p>"},{"location":"clojure/amazonica/#project-dependency","title":"Project Dependency","text":"<p>Add amazonica as a project dependency, to either a Clojure CLI or Leiningen project.</p> Clojure CLILeiningen deps.edn<pre><code>amazonica/amazonica {:mvn/version \"0.3.165\"}\n</code></pre> project.clj<pre><code>[amazonica \"0.3.165\"]\n</code></pre>"},{"location":"clojure/amazonica/#basic-example","title":"Basic example","text":"<pre><code>(ns com.example\n  (:require [amazonica.aws.ec2 :as aws-ec2]))\n\n(aws-ec2/describe-instances)\n\n(aws-ec2/create-snapshot\n  :volume-id   \"vol-8a4857fa\"\n  :description \"snapshot for testing\")\n</code></pre> <p>Amazonica uses the Java client library to support the complete set of remote service calls implemented by each of the service-specific AWS client classes (e.g. AmazonEC2Client, AmazonS3Client, etc.)</p> <ul> <li>[AWS Javadocs][2]. </li> <li>[cljdoc function references][25] </li> </ul> <p>Reflection is used to create idiomatically named Clojure Vars in the library namespaces corresponding to the AWS service. </p> <p>camelCase Java methods become lower-case, hyphenated Clojure functions. </p> <p>Create snapshot of running EC2 instance</p> <pre><code>(aws-ec2/create-snapshot\n  :volume-id \"vol-8a4857fa\"\n  :description \"my_new_snapshot\")\n</code></pre> <p>aws-ec2/create-snapshot delegates to [createSnapshot()][3] method of AmazonEC2Client. </p> <p>Java methods that take a parameter, e.g. [CreateSnapshotRequest][4] have their bean properties exposed via mutators and can be supplied as key-value pairs passed as arguments to the Clojure function.</p> <p>All of the AWS Java APIs (except S3) follow this pattern, either having a single implementation method that takes an AWS Java bean as its only argument, or being overloaded and having a no-arg implementation. </p> <p>The corresponding Clojure function will either require key-value pairs as arguments, or be variadic and allow a no-arg invocation.</p> <p>AmazonEC2Client's [describeImages()][7] method is overloaded and can be invoked either with no args or with a [DescribeImagesRequest][8]. </p> <p>Clojure invocation </p> <pre><code>(aws-ec2/describe-images)\n</code></pre> <p>or</p> <pre><code>(aws-ec2/describe-images\n  :owners [\"self\"]\n  :image-ids [\"ami-f00f9699\" \"ami-e0d30c89\"])\n</code></pre> Supported Services <p>AWS services supported by Amazonica * Amplify * API Gateway * AppConfig * Application Insights * App Mesh * Augmented AI * Autoscaling * Austocaling Plans * Backup * Batch * Budgets * Certificate Manager * CloudDirectory * CloudFormation * CloudFront * CloudSearch * CloudSearchV2 * CloudSearchDomain * CloudWatch * CloudWatchEvents * CodeBuild * CodeCommit * CodeDeploy * CodePipeline * CodeStar * Cognito * CognitoIdentityProviders * Comprehend * Compute Optimizer * Config * Connect * CostAndUsageReport * CostExplorer * DatabaseMigrationService * DataPipeline * Data Exchange * Data Sync * Dax * Detective * DeviceFarm * DirectConnect * Directory * DLM * DocDB * DynamoDBV2 * EC2 * EC2InstanceConnect * ECR * ECS * ElastiCache * ElasticBeanstalk * ElasticFileSystem * ElasticLoadBalancing * ElasticMapReduce * Elasticsearch * ElasticTranscoder * Event Bridge * Forecast * Fraud Detector * GameLift * Glacier * Global Accelerator * Glue * GreenGrass * Groundstation * GuardDuty * IdentityManagement * Image Builder * ImportExport * IoT * Kafka * Kendra * Kinesis * Kinesis Analytics * KinesisFirehose * Kinesis Video Streams with WebRTC (Signaling Channels) * KMS * Lake Formation * Lambda * Lex * Lightsail * Logs * MachineLearning * Macie * Managed Blockcahin * MechanicalTurk * MediaConvert * MediaLive * MediaPackage * MediaStore * MigrationHub * Mobile * MQ * MSK (Managed Kafka) * OpsWorks * Personalize * Pinpoint * Pricing * Polly * QLDB * Quicksight * RDS * Redshift * Rekognition * Route53 * Route53Domains * S3 * Sagemaker * Secrets Manager * Security Hub * Security Token * ServerMigration * ServiceCatalog * Service Discovery * Shield * SimpleDB * SimpleEmail * SimpleSystemsManager * SimpleWorkflow * Snowball * SNS * SQS * StepFunctions * StorageGateway * Support * Textract * Timestream * Transcribe * Transfer * Translate * WAF * Workspaces * XRay</p>"},{"location":"clojure/congnitect-labs-aws-api/","title":"Congnitect Labs AWS API","text":"<p> Congnitect Labs AWS API</p> <p> Congnitect Labs AWS API is an idiomatic, data-oriented Clojure library for invoking AWS APIs.</p> <p>AWS APIs are described in data that specifies operations, inputs and outputs.</p> <p>aws-api uses the data descriptions to expose a data-oriented interface, using service descriptions, documentation and specs generated from the source descriptions.</p> <p>Data descriptions are versioned, e.g. <code>com.cognitect.aws/dynamo-db-653.2.351.0</code></p> <p> AWS API Descriptors</p> <p>AWS API uses data descriptions from  aws-sdk-js but does not wrap the any language SDK, which would tie you to that workflow</p> <p>The main functions are</p> <ul> <li><code>client</code> - create a client for a given service</li> <li><code>invoke</code> - an operation on the service (assumption:? via the client), takes and returns a hash-map</li> </ul> <p>Helper functions:</p>"},{"location":"clojure/congnitect-labs-aws-api/#library-dependencies","title":"Library Dependencies","text":"<p> AWS API - latest-releases.edn</p> <p>S3 Bucket</p> <pre><code>com.cognitect.aws/api       {:mvn/version \"0.8.666\"}\ncom.cognitect.aws/endpoints {:mvn/version \"1.1.12.456\"}\ncom.cognitect.aws/s3        {:mvn/version \"847.2.1365.0\"}\n</code></pre>"},{"location":"clojure/congnitect-labs-aws-api/#repl-workflow","title":"REPL workflow","text":"<p>Create a project with a <code>deps.edn</code> file that contains the library dependencies for Cognitect Labs AWS API.</p> <p>Require the client API.</p> <pre><code>(require '[cognitect.aws.client.api :as aws])\n</code></pre> <p>Create a client</p> <pre><code>(def s3 (aws/client {:api :s3}))\n</code></pre> <p>Ask what operations the client can perform</p> <pre><code>(aws/ops s3)\n</code></pre> <p>Request documentation for an operation</p> <pre><code>(aws/doc s3 :CreateBucket)\n</code></pre> <p>Instruct the client to validate requests, reporting when incorrect arguments are used</p> <pre><code>(aws/validate-requests s3 true)\n</code></pre> <p>List the S3 buckets</p> <pre><code>(aws/invoke s3 {:op :ListBuckets})\n;; =&gt; {:Buckets [{:Name &lt;name&gt; :CreationDate &lt;date&gt; ,,,}]}\n\nGet the meta data from the previous expression, i.e. list buckets\nhttp-request and http-response are in the metadata\n```clojure\n(meta *1)\n;; =&gt; {:http-request {:request-method :get,\n;;                    :scheme :https,\n;;                    :server-port 443,\n;;                    :uri \"/\",\n;;                    :headers {,,,},\n;;                    :server-name \"s3.amazonaws.com\",\n;;                    :body nil},\n;;     :http-response {:status 200,\n;;                     :headers {,,,},\n;;                     :body &lt;input-stream&gt;}\n</code></pre> <p>Create bucket in the same region as client</p> <pre><code>(aws/invoke s3 {:op :CreateBucket :request {:Bucket \"my-unique-bucket-name\"}})\n</code></pre> <p>Create a bucket in a region other than us-east-1</p> <pre><code>(aws/invoke s3 {:op :CreateBucket :request {:Bucket \"my-unique-bucket-name-in-us-west-1\"\n                                            :CreateBucketConfiguration\n                                            {:LocationConstraint \"us-west-1\"}}})\n</code></pre> <p>NOTE: be sure to create a client with region \"us-west-1\" when accessing that bucket.</p> <pre><code>(aws/invoke s3 {:op :ListBuckets})\n</code></pre>"},{"location":"introduction/aws-services/","title":"AWS Services","text":"<p> AWS Cloud Products search </p> <p>Commonly used services include</p> <ul> <li>Management Console administer AWS account</li> <li>IAM Identity Center account directory</li> <li>S3 serving static data</li> <li>RDS relational database services, e.g. Postgres</li> <li>Lambda code without infrastructure provision</li> <li>EC2 compute service</li> <li>Lightsail pre-configured cloud resources, LAMP, Nginex, MEAN, Node.js</li> </ul>"},{"location":"introduction/aws-services/#services-overview","title":"Services overview","text":""},{"location":"introduction/contributing/","title":"Contributing to Practicalli","text":"<p>Practicalli books are written in markdown and use MkDocs to generate the published website via a GitHub workflow.  MkDocs can also run a local server using the <code>make docs</code> target from the <code>Makefile</code></p> <p>By submitting content ideas and corrections you are agreeing they can be used in this book under the Creative Commons Attribution ShareAlike 4.0 International license.  Attribution will be detailed via GitHub contributors.</p> <p>All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct.</p>"},{"location":"introduction/contributing/#book-status","title":"Book status","text":""},{"location":"introduction/contributing/#submit-and-issue-or-idea","title":"Submit and issue or idea","text":"<p>If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can.</p> <p>Raising an issue before creating a pull request will save you and the maintainer time.</p>"},{"location":"introduction/contributing/#considering-a-pull-request","title":"Considering a Pull request?","text":"<p>Before investing any time in a pull request, please raise an issue explaining the situation.  This can save you and the maintainer time and avoid rejected pull requests.</p> <p>Please keep pull requests small and focused, as they are much quicker to review and easier to accept.  Ideally PR's should be for a specific page or at most a section.</p> <p>A PR with a list of changes across different sections will not be merged, it will be reviewed eventually though.</p>"},{"location":"introduction/contributing/#thank-you-to-everyone-that-has-contributed","title":"Thank you to everyone that has contributed","text":"<p>A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language.  Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling.</p> <p>The Clojure community has been highly supportive of everyone using Clojure and I'd like to thank everyone for the feedback and contributions.  I would also like to thank everyone that has joined in with the London Clojurins community, ClojureBridgeLondon, Clojurians Slack community, Clojurians Zulip community and Clojureverse community.</p> <p>Thank you to everyone who sponsors the Practicalli websites and videos and for the Clojurists Together sponsorship, it helps me continue the work at a much faster pace.</p> <p>Special thanks to Bruce Durling for getting me into Cloure in the first place.</p> <p></p>"},{"location":"introduction/repl-workflow/","title":"REPL Driven Development","text":"<p>Always be REPL'ing</p> <p>Coding without a REPL feels limiting. The REPL provides fast feedback from code as its crafted, testing assumptions and design choices every step of the journey to a solution  - John Stevenson, Practical.li</p> <p>Clojure is a powerful, fun and highly productive language for developing applications and services.  The clear language design is supported by a powerful development environment known as the REPL (read, evaluate, print, loop).  The REPL gives you instant feedback on what your code does and enables you to test either a single expression or run the whole application (including tests).</p> <p>REPL driven development is the foundation of working with Clojure effectively</p> <p>An effective Clojure workflow begins by running a REPL process.  Clojure expressions are written and evaluated immediately to provide instant feedback. The REPL feedback helps test the assumptions that are driving the design choices.</p> <ul> <li>Read - code is read by the Clojure reader, passing any macros to the macro reader which converts those macros into Clojure code.</li> <li>Evaluate - code is compiled into the host language (e.g. Java bytecode) and executed</li> <li>Print - results of the code are displayed, either in the REPL or as part of the application.</li> <li>Loop - the REPL is a continuous process that evaluates code, either a single expression or the whole application.</li> </ul> <p>Design decisions and valuable data from REPL experiments can be codified as specifications and unit tests</p> <p>Practicalli REPL Reloaded Workflow</p> <p>The principles of REPL driven development are implemented in practice using the Practicalli REPL Reloaded Workflow and supporting tooling.  This workflow uses Portal to inspect all evaluation results and log events, hot-load libraries into the running REPL process and reloads namespaces to support major refactor changes.</p>"},{"location":"introduction/repl-workflow/#evaluating-source-code","title":"Evaluating source code","text":"<p>A REPL connected editor is the primary tool for evaluating Clojure code from source code files, displaying the results inline.</p> <p>Source code is automatically evaluated in its respective namespace, removing the need to change namespaces in the REPL with (<code>in-ns</code>) or use fully qualified names to call functions.</p> <p> </p> Evaluate Clojure in a Terminal UI REPL <p>Entering expressions at the REPL prompt evaluates the expression immediately, returning the result directly underneath  </p>"},{"location":"introduction/repl-workflow/#rich-comment-blocks-living-documentation","title":"Rich Comment blocks - living documentation","text":"<p>The <code>(comment ,,,)</code> function wraps code that is only run directly by the developer using a Clojure aware editor.</p> <p>Expressions in rich comment blocks can represent how to use the functions that make up the namespace API.  For example, starting/restarting the system, updating the database, etc.  Expressions provide examples of calling functions with typical arguments and make a project more accessible and easier to work with.</p> <p>Clojure Rich Comment to manage a service</p> <pre><code>(ns practicalli.gameboard.service)\n\n(defn app-server-start [port] ,,,)\n(defn app-server-start [] ,,,)\n(defn app-server-restart [] ,,,)\n\n(defn -main\n  \"Start the service using system components\"\n  [&amp; options] ,,,)\n\n(comment\n  (-main)\n  (app-server-start 8888)\n  (app-server-stop)\n  (app-server-restart 8888)\n\n  (System/getenv \"PORT\")\n  (def environment (System/getenv))\n  (def system-properties (System/getProperties))\n  ) ; End of rich comment block\n</code></pre> <p>Rich comment blocks are very useful for rapidly iterating over different design decisions by including the same function but with different implementations.  Hide clj-kondo linter warnings for redefined vars (<code>def</code>, <code>defn</code>) when using this approach.</p> <pre><code>;; Rich comment block with redefined vars ignored\n#_{:clj-kondo/ignore [:redefined-var]}\n(comment\n  (defn value-added-tax []\n    ;; algorithm design - first idea)\n\n  (defn value-added-tax []\n    ;; algorithm design - second idea)\n\n  ) ;; End of rich comment block\n</code></pre> <p>The \"Rich\" in the name is an honourary mention to Rich Hickey, the author and benevolent dictator of Clojure design.</p>"},{"location":"introduction/repl-workflow/#design-journal","title":"Design Journal","text":"<p>A journal of design decisions makes the code easier to understand and maintain.  Code examples of design decisions and alternative design discussions are captured, reducing the time spent revisiting those discussions.</p> <p>Journals simplify the developer on-boarding processes as the journey through design decisions are already documented.</p> <p>A Design Journal is usually created in a separate namespace, although it may start as a rich comment at the bottom of a namespace.</p> <p>A journal should cover the following aspects</p> <ul> <li>Relevant expressions use to test assumptions about design options.</li> <li>Examples of design choices not taken and discussions why (saves repeating the same design discussions)</li> <li>Expressions that can be evaluated to explain how a function or parts of a function work</li> </ul> <p>The design journal can be used to create meaningful documentation for the project very easily and should prevent time spent on repeating the same conversations.</p> <p>Example design journal</p> <p>Design journal for TicTacToe game using Reagent, ClojureScript and Scalable Vector Graphics</p>"},{"location":"introduction/repl-workflow/#viewing-data-structures","title":"Viewing data structures","text":"<p>Pretty print shows the structure of results from function calls in a human-friendly form, making it easier for a developer to parse and more likely to notice incorrect results.</p> <p>Tools to view and navigate code</p> <ul> <li> Cider inspector is an effective way to navigate nested data and page through large data sets.</li> <li> Portal Inspector to visualise many kinds of data in many different forms.</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#code-style-and-idiomatic-clojure","title":"Code Style and idiomatic Clojure","text":"<p>Clojure aware editors should automatically apply formatting that follows the  Clojure Style guide.</p> <p>Live linting with clj-kondo suggests common idioms and highlights a wide range of syntax errors as code is written, minimizing bugs and therefore speeding up the development process.</p> <p> </p> <p>Clojure LSP is build on top of clj-kondo</p> <p> Clojure LSP uses clj-kondo static analysis to provide a standard set of development tools (format, refactor, auto-complete, syntax highlighting, syntax &amp; idiom warnings, code navigation, etc).</p> <p>Clojure LSP can be used with any Clojure aware editor that provides an LSP client, e.g.  Spacemacs,  Doom Emacs,  Neovim, VSCode.</p> <p>Clojure Style Guide</p> <p>The  Clojure Style guide provides examples of common formatting approaches, although the development team should decide which of these to adopt.  Emacs <code>clojure-mode</code> will automatically format code and so will Clojure LSP (via cljfmt).  These tools are configurable and should be tailored to the teams standard.</p>"},{"location":"introduction/repl-workflow/#data-and-function-specifications","title":"Data and Function specifications","text":"<p> Clojure spec is used to define a contract on incoming and outgoing data, to ensure it is of the correct form.</p> <p>As data structures are identified in REPL experiments, create data specification to validate the keys and value types of that data.</p> <pre><code>;; ---------------------------------------------------\n;; Address specifications\n(spec/def ::house-number string?)\n(spec/def ::street string?)\n(spec/def ::postal-code string?)\n(spec/def ::city string?)\n(spec/def ::country string?)\n(spec/def ::additional string?)\n\n(spec/def ::address   ; Composite data specification\n  (spec/keys\n   :req-un [::street ::postal-code ::city ::country]\n   :opt-un [::house-number ::additional]))\n;; ---------------------------------------------------\n</code></pre> <p>As the public API is designed, specifications for each functions arguments are added to validate the correct data is used when calling those functions.</p> <p> Generative testing provides a far greater scope of test values used incorporated into unit tests. Data uses clojure.spec to randomly generate data for testing on each test run.</p>"},{"location":"introduction/repl-workflow/#test-driven-development-and-repl-driven-development","title":"Test Driven Development and REPL Driven Development","text":"<p>Test Driven Development (TDD) and REPL Driven Development (RDD) complement each other as they both encourage incremental changes and continuous feedback.</p> <p>Test Driven Development fits well with Hammock Time, as good design comes from deep thought</p> <ul> <li>RDD enables rapid design experiments so different approaches can easily and quickly be evaluated .</li> <li>TDD focuses the results of the REPL experiments into design decisions, codified as unit tests.  These tests guide the correctness of specific implementations and provide critical feedback when changes break that design.</li> </ul> <p> Unit tests should support the public API of each namespace in a project to help prevent regressions in the code.  Its far more efficient in terms of thinking time to define unit tests as the design starts to stabilize than as an after thought.</p> <p><code>clojure.test</code> library is part of the Clojure standard library that provides a simple way to start writing unit tests.</p> <p> Clojure spec can also be used for generative testing, providing far greater scope in values used when running unit tests.  Specifications can be defined for values and functions.</p> <p>Clojure has a number of  test runners available.  Kaocha is a test runner that will run unit tests and function specification checks.</p> <p>Automate local test runner</p> <p>Use  kaocha test runner in watch mode to run tests and specification check automatically (when changes are saved) <pre><code>clojure -X:test/watch\n</code></pre></p>"},{"location":"introduction/repl-workflow/#continuous-integration-and-deployment","title":"Continuous Integration and Deployment","text":"<p>Add a  continuous integration service to run tests and builds code on every shared commit.  Spin up testable review deployments when commits pushed to a pull request branch, before pushing commits to the main deployment branch, creating an effective pipeline to gain further feedback.</p> <ul> <li> CircleCI provides a simple to use service that supports Clojure projects.</li> <li> GitHub Workflows and GitHub actions marketplace to quickly build a tailored continuous integration service, e.g. Setup Clojure GitHub Action.</li> <li> GitLab CI</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#live-coding-with-data-stuart-halloway","title":"Live Coding with Data - Stuart Halloway","text":"<p>There are few novel features of programming languages, but each combination has different properties. The combination of dynamic, hosted, functional and extended Lisp in Clojure gives developers the tools for making effective programs. The ways in which Clojure's unique combination of features can yield a highly effective development process.</p> <p>Over more than a decade we have developed an effective approach to writing code in Clojure whose power comes from composing many of its key features. As different as Clojure programs are from e.g. Java programs, so to can and should be the development experience. You are not in Kansas anymore!</p> <p>This talk presents a demonstration of the leverage you can get when writing programs in Clojure, with examples, based on my experiences as a core developer of Clojure and Datomic.</p> <p> </p>"},{"location":"introduction/writing-tips/","title":"Writing tips for MkDocs","text":"<p>Making the docs more engaging using the mkdocs-material theme reference guide</p> Configuring Colors <p>Material for MkDocs - Changing the colors lists the primary and accent colors available.</p> <p>HSL Color Picker for codes to modify the theme style, overriding colors in <code>docs/assets/stylesheets/extra.css</code></p>"},{"location":"introduction/writing-tips/#hypertext-links","title":"Hypertext links","text":"<p>Links open in the same browser window/tab by default.</p> <p>Add <code>{target=_blank}</code> to the end of a link to configure opening in a new tab</p> <pre><code>[link text](url){target=_blank}\n</code></pre>"},{"location":"introduction/writing-tips/#buttons","title":"Buttons","text":"<p>Convert any link into a button by adding <code>{.md-button}</code> class names to end of the markdown for a link, which uses <code>.md-button-primary</code> by default.  Include <code>target=_blank</code> for buttons with links to external sites.</p> <pre><code>[link text](http://practical.li/blog){.md-button target=_blank}\n</code></pre> <p>Or specify a different class</p> <pre><code>[link text](http://practical.li/blog){.md-button .md-button-primary}\n</code></pre> <p>Add an icon to the button</p> <p> Practicalli Issues  Practicalli Blog</p> <pre><code>[:fontawesome-brands-github: Practicalli Issues](http://practical.li/blog){ .md-button .md-button-primary }\n[:octicons-heart-fill-24: Practicalli Blog](http://practical.li/blog){ .md-button .md-button-primary }\n</code></pre> <p>Search all supported icons</p>"},{"location":"introduction/writing-tips/#youtube-video","title":"YouTube video","text":"<p>Use an iframe element to include a YouTube video, wrapping in a paragraph tag with center alignment to place the video in a centered horizontal position</p> <pre><code>&lt;p style=\"text-align:center\"&gt;\n&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rQ802kSaip4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/p&gt;\n</code></pre> <p>mkdocs material does not have direct support for adding a YouTube video via markdown.</p>"},{"location":"introduction/writing-tips/#admonitions","title":"Admonitions","text":"<p>Supported admonition types</p> <p>Note</p> <p>Use <code>!!!</code> followed by <code>NOTE</code></p> <p>Adding a title</p> <p>Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> <p>Shh, no title bar just the text... Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"\"</code> empty double quotes</p> <p>Abstract</p> <p>Use <code>!!!</code> followed by <code>ABSTRACT</code></p> <p>Info</p> <p>Use <code>!!!</code> followed by <code>INFO</code></p> <p>Tip</p> <p>Use <code>!!!</code> followed by <code>TIP</code></p> <p>Success</p> <p>Use <code>!!!</code> followed by <code>SUCCESS</code></p> <p>Question</p> <p>Use <code>!!!</code> followed by <code>QUESTION</code></p> <p>Warning</p> <p>Use <code>!!!</code> followed by <code>WARNING</code></p> <p>Failure</p> <p>Use <code>!!!</code> followed by <code>FAILURE</code></p> <p>Danger</p> <p>Use <code>!!!</code> followed by <code>DANGER</code></p> <p>Bug</p> <p>Use <code>!!!</code> followed by <code>BUG</code></p> <p>Example</p> <p>Use <code>!!!</code> followed by <code>EXAMPLE</code></p> <p>Quote</p> <p>Use <code>!!!</code> followed by <code>QUOTE</code></p>"},{"location":"introduction/writing-tips/#collapsing-admonitions","title":"Collapsing admonitions","text":"Note <p>Collapse those admonitions using <code>???</code> instead of <code>!!!</code></p> Replace with a title <p>Use <code>???</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> Expanded by default <p>Use <code>???+</code>, note the <code>+</code> character,  followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p>"},{"location":"introduction/writing-tips/#inline-blocks","title":"Inline blocks","text":"<p>Inline blocks of text to make a very specific callout within text</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Adding something to then end of text is probably my favourite</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#code-blocks","title":"Code blocks","text":"<p>Code blocks include a copy icon automatically</p> <p>Syntax highlighting in code blocks</p> <pre><code>(defn my-function  ; Write a simple function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p>Give the code block a title using <code>title=\"\"</code> after the backtics and language name</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p>We all like line numbers, especially when you can set the starting line</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p>Add <code>linenums=42</code> to start line numbers from 42 onward</p> <pre><code>clojure linenums=\"42\" title=\"src/practicalli/gameboard.clj\"\n</code></pre>"},{"location":"introduction/writing-tips/#annotations","title":"Annotations","text":"<p>Annotations in a code block help to highlight important aspects.  Use the comment character for the language followed by a space and a number in brackets</p> <p>For example, in a shell code block, use <code># (1)</code> where 1 is the number of the annotation</p> <p>Use a number after the code block to add the text for the annotation, e.g. <code>1.</code>. Ensure there is a space between the code block and the annotation text.</p> <pre><code>ls -la $HOME/Downloads  # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted text, images, ... basically anything that can be written in Markdown.</li> </ol> <p>Code blocks with annotation, add <code>!</code> after the annotation number to suppress the <code>#</code> character</p> <pre><code>(defn helper-function\n  \"Doc-string with description of function purpose\" ; (1)!\n  [data]\n  (merge {:fish 1} data)\n  )\n</code></pre> <ol> <li>Always include a doc-string in every function to describe the purpose of that function, identifying why it was added and what its value is.</li> </ol> <p>GitHub action example with multiple annotations</p> <pre><code>name: ci # (1)!\non:\n  push:\n    branches:\n      - master # (2)!\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material # (3)!\n      - run: mkdocs gh-deploy --force\n</code></pre> <ol> <li> <p>You can change the name to your liking.</p> </li> <li> <p>At some point, GitHub renamed <code>master</code> to <code>main</code>. If your default branch     is named <code>master</code>, you can safely remove <code>main</code>, vice versa.</p> </li> <li> <p>This is the place to install further [MkDocs plugins] or Markdown     extensions with <code>pip</code> to be used during the build:</p> <pre><code>pip install \\\n  mkdocs-material \\\n  mkdocs-awesome-pages-plugin \\\n  ...\n</code></pre> </li> </ol>"},{"location":"introduction/writing-tips/#highlight-lines-in-code-blocks","title":"Highlight lines in code blocks","text":"<p>Add highlight line meta data to a code block after the opening backticks and code block language.</p> <p><code>hl_lines=\"2\"</code> highlights line 2 in the codeblock</p> <pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map\n   inc\n   [1 2 3]))\n</code></pre>"},{"location":"introduction/writing-tips/#embed-external-files","title":"Embed external files","text":"<p><code>--8&lt;--</code> in a code block inserts code from a source code file or other text file</p> <p>Specify a local file from the root of the book project (the directory containing mkdocs.yml)</p> Scheduled Version Check GitHub Workflow from source code file scheduled version check<pre><code>\n</code></pre> Practicalli Project Templates Emacs project configuration - .dir-locals.el<pre><code>((clojure-mode . ((cider-preferred-build-tool . clojure-cli)\n                  (cider-clojure-cli-aliases . \":test/env:dev/reloaded\"))))\n</code></pre> <p>Code example reuse</p> <p>Use an embedded local or external file (URL) when the same content is required in more than one place in the book.</p> <p>An effective way of sharing code and configuration mutliple times in a book or across multiple books.</p>"},{"location":"introduction/writing-tips/#content-tabs","title":"Content tabs","text":"<p>Create in page tabs that can also be</p> <p>Setting up a project</p> Clojure CLILeiningen <pre><code>clojure -T:project/new :template app :name practicalli/gameboard\n</code></pre> <pre><code>lein new app practicalli/gameboard\n</code></pre> <p>Or nest the content tabs in an admonition</p> <p>Run a terminal REPL</p> Clojure CLILeiningen <pre><code>clojure -T:repl/rebel\n</code></pre> <pre><code>lein repl\n</code></pre>"},{"location":"introduction/writing-tips/#diagrams","title":"Diagrams","text":"<p>Neat flow diagrams</p> <p>Diagrams - Material for MkDocs</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <p>UML Sequence Diagrams</p> <pre><code>sequenceDiagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <p>state transition diagrams</p> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre> <p>Class diagrams - not needed for Clojure</p> <p>Entity relationship diagrams are handy though</p> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    customer-name string\n    unit-price int\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"},{"location":"introduction/writing-tips/#keyboard-keys","title":"Keyboard keys","text":"<p>Represent key bindings with Keyboard keys. Each number and alphabet character has their own key.</p> <ul> <li>1 <code>++1++</code> for numbers</li> <li>l <code>++\"l\"++</code> for lowercase character</li> <li>U <code>++u++</code> for uppercase character or <code>++\"U\"++</code> for consistency</li> </ul> <p>Punctionation keys use their name</p> <ul> <li>Space <code>++spc++</code></li> <li>, <code>++comma++</code></li> <li>Left <code>++arrow-left++</code></li> </ul> <p>For key sequences, place a space between each keyboard character</p> <ul> <li>Space g s <code>++spc++ ++\"g\"++ ++\"s\"++</code></li> </ul> <p>For key combinations, use join they key identifies with a <code>+</code></p> <ul> <li>Meta+X <code>++meta+x++</code></li> <li>Ctrl+Alt+Del <code>++ctrl+alt+del++</code></li> </ul> <p>MkDocs keyboard keys reference</p>"},{"location":"introduction/writing-tips/#images","title":"Images","text":"<p>Markdown images can be appended with material tags to set the size of the image, whether to appear on light or dark theme and support lazy image loading in browsers</p> SizeLazy LoadingAlignTheme SpecificAll Image Attributes <p><code>{style=\"height:150px;width:150px\"}</code> specifies the image size <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n</code></pre></p> <p></p> <p><code>{loading=lazy}</code> specifies an image should lazily load in the browser <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png){loading=lazy}\n</code></pre></p> <p><code>{aligh=left}</code> or <code>{aligh=right}</code> specifies the page alignment of an image. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right}\n</code></pre></p> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p><code>![Kitty Logo](image/kitty-light.png#only-dark)</code> or <code>![Kitty Logo](image/kitty-light.png#only-light)</code>  specifies the theme the image should be shown, allowing different versions of images to be shown based on the theme. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){style=\"height:150px;width:150px\"}\n</code></pre> Use the theme toggle in the top nav bar to see the icon change between light and dark.  </p> <p>Requires the color pallet toggle</p> <p>Alight right, lazy load and set image to 150x150</p> <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right loading=lazy style=\"height:64px;width:64px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right loading=lazy style=\"height:64px;width:64px\"}\n</code></pre> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#lists","title":"Lists","text":"<p>Task lists</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> <p>Task List example</p> <pre><code>- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre>"},{"location":"introduction/writing-tips/#tooltips","title":"Tooltips","text":"<p>The humble tool tip</p> <p>Hover me</p> <p>with references</p> <p>Hover me</p> <p>Icon tool tip with a title</p> <p></p>"},{"location":"introduction/writing-tips/#abreviations","title":"Abreviations","text":"<p>The HTML specification is maintained by the W3C.</p> <p>[HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium</p>"},{"location":"introduction/writing-tips/#magic-links","title":"Magic links","text":"<p>MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format.</p> <p>Email Practicalli</p> <p>Practicalli Neovim</p>"},{"location":"service/","title":"Services","text":"Service Description Simple Storage Solution (S3) Store a range of file types"},{"location":"service/simple-storage-solution/","title":"Simple Storage Solution","text":"<p>Amazon S3 or Amazon Simple Storage Service is a service offered by Amazon Web Services that provides object storage through a web service interface.</p>"},{"location":"service/simple-storage-solution/#references","title":"References","text":"<p> Wikipedia: Amazon S3</p>"},{"location":"tools/","title":"Amazon Command Line tools","text":"<p>AWS CLI</p> <p>AWS Vault</p> <p>Amazon Linux docker image</p> <p>Congitect AWS tools</p>"},{"location":"tools/amazon-linux/","title":"Amazon Linux","text":"<p>Amazon Linux 2 is a Linux operating system from Amazon Web Services (AWS). It provides a security-focused, stable, and high-performance execution environment to develop and run cloud applications. Amazon Linux 2 is provided at no additional charge. AWS provides ongoing security and maintenance updates for Amazon Linux 2.</p>"},{"location":"tools/amazon-linux/#benefits","title":"Benefits","text":"<ul> <li>Amazon Linux is provides at no additional charge</li> <li>tuned for enhanced performance with support for the latest Amazon EC2 instance capabilities</li> <li>includes packages that help ease integration with other AWS Services</li> <li>a virtual machine and container image for on-premises development and testing</li> <li>avoid environment issues affecting development by building, testing and integrating on the same Linux distribution used in the production environment</li> <li>long-term support without compromising access to the latest versions of popular software packages</li> <li>a growing community of Technology Partners applications from Independent Software Vendors (ISVs)</li> </ul>"},{"location":"tools/aws-cli/","title":"AWS Command Line Interface - CLI","text":"<p>The AWS Command Line Interface (AWS CLI) is a unified tool to manage your AWS services. With just one tool to download and configure, you can control multiple AWS services from the command line and automate them through scripts.</p> <p>Practicalli dotfiles .aws/config</p> <p>practicalli/dotfiles .aws/config file is an example of an AWS Config with profiles and Okta single sign-on</p> AWS CLI 2 version <p>print the currently installed version <pre><code>aws --version\n</code></pre> The output should be similar to: <pre><code>aws-cli/2.11.20 Python/3.11.3 Linux/5.15.0-71-generic exe/x86_64.ubuntu.22 prompt/off\n</code></pre></p>"},{"location":"tools/aws-cli/#install","title":"Install","text":"<p>Download the relevant install from AWS Command Line Interface website</p> Linux <p>Install and update guide</p> <p>Check the AWS CLI version 2 changelog to see the latest version available.</p> <p>The script will install AWS CLI in <code>usr/local/</code> by default, although this can be overriddent with <code>--bin-dir</code> and <code>--install-dir</code> options on the <code>aws/install</code> command.</p> <p>Download the install script archive file <pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n</code></pre> Extract the install script, ideally to the local application directory for the user for later updates. <pre><code>unzip awscliv2.zip -d ~/.local/apps\n</code></pre> Run the install script, providing the user password when prompted <pre><code>sudo ~/.local/apps/aws/install\n</code></pre></p> <p>Update via the <code>install</code> script in the extracted awscliv2 archive <pre><code>sudo ~/.local/apps/aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update\n</code></pre></p>"},{"location":"tools/aws-cli/#create-local-configuration","title":"Create local configuration","text":"<p>Setup AWS CLI</p> <p><code>aws configure</code> provides a wizard for some kinds of credentials but not all.  <code>aws configure set</code> will set specific variables and values</p> <p>Create an IAM user for programmatic access using a group (create if neccessary) that include the Permission profiles for the services that will be accesses.</p> <p>Copy the ARN for the IAM user (login as root user if the IAM user does not have web console login - which ideally it should not)</p> Short Term CredentialsIAM roleIAM Idetity Center <p> Authenticating using short-term credentials</p> <p>Session Token have 12 hours maximum life</p> <p>Create Access Keys in an IAM user to get values for <code>AWS Access Key ID</code> and <code>AWS Secret Access Key</code>.</p> <p>Use the AWS CLI configuration wizard to set up most of the configuration :)</p> <p>AWS CLI configure short-term credentials</p> <p><pre><code>aws configure\n</code></pre> Example ouput <pre><code>AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE\nAWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nDefault region name [None]: us-west-2\nDefault output format [None]: json\n</code></pre></p> <p>A <code>default</code> profile is created in <code>\"~/.aws/config\"</code> with the above values</p> <p>Optionally edit the <code>\"~/.aws/config\"</code> file and add additional environment variables and profiles</p> <p>DO NOT Create a session token, its not required.</p> <p>Profiles which use IAM roles pull credentials from another profile and then apply IAM role permissions.</p> <p><code>default</code> is the source profile for credentials and jr0cket-cli borrows the same credentials then assumes a new role.</p> <p>Use the aws cli to set specific environment variables for the IAM role.</p> <p><pre><code>aws configure set\n</code></pre> Example commands <pre><code>aws configure set role_arn arn:aws:iam::123456789012:role/defaultrole\naws configure set source_profile default\naws configure set role_session_name session_user1\naws configure set region us-west-2\naws configure set output json\n</code></pre></p> <p>Requires a single sign-on token provider, e.g. Okta, Active Directory, LDAP service, etc.</p> <pre><code>aws configure sso\n</code></pre> <p>Example output <pre><code>SSO session name (Recommended): my-sso\nSSO start URL [None]: https://my-sso-portal.awsapps.com/start\nSSO region [None]:us-east-1\n</code></pre></p> <p>Attempting to automatically open the SSO authorization page in your default browser.</p> <p>There are 2 AWS accounts available to you.</p> <p>DeveloperAccount, developer-account-admin@example.com (111122223333)   ProductionAccount, production-account-admin@example.com (444455556666)</p> <p>Using the account ID 111122223333</p> <p>There are 2 roles available to you.</p> <p>ReadOnly   FullAccess</p> <p>Using the role name \"ReadOnly\"</p> <p>CLI default client Region [None]: us-west-2 CLI default output format [None]: json CLI profile name [123456789011_ReadOnly]: user1 ```</p> <p>Practicalli dotfiles .aws/config</p> <p>practicalli/dotfiles .aws/config file is an example of an AWS Config with profiles and Okta single sign-on</p>"},{"location":"tools/aws-cli/#creating-profiles-for-environments","title":"Creating profiles for environments","text":"<p>Software engineering teams should have the ability to deploy on at least a test and staging environment (with production typically kept for operations focused roles or teams).</p> <p>The AWS CLI can have multiple profiles with configuration specific to the environment.</p> <pre><code>## Default settings used with all profiles\n# [default]\n# region = eu-west-2\n\n\n# [profile test]\n# role_arn = arn:aws:iam::************:role/Developer\n# mfa_serial = arn:aws:iam::************:mfa/my.email@company-domain.com\n# source_profile = default\n\n# [profile staging]\n# role_arn = arn:aws:iam::************:role/Developer\n# mfa_serial = arn:aws:iam::************:mfa/my.email@company-domain.com\n# source_profile = default\n</code></pre>"},{"location":"tools/aws-cli/#okta-single-sign-on","title":"Okta Single Sign-on","text":"<p>Okta is a widely used Single Sign-on solution for managing access to business apps as well as Amazon Web Services (AWS) console and APIs.</p> <p>Define a profile (optional, but recommended) that contains the URL for the Okta single sign-on service and its authorisation endpoint.</p> <p>Define an <code>sso_region</code> that matches the AWS region in which the AWS profile should operate within.</p> <p>Add and <code>sso_account_id</code> and <code>sso_role_name</code> to define identity within AWS.</p> <pre><code>[profile domain-staging]\nsso_start_url = https://&lt;sso-domain&gt;.com/start\nsso_region = eu-west-2\nsso_account_id = &lt;arn:aws:iam value&gt;\nsso_role_name = PowerUserAccess\nregion = eu-west-2\n</code></pre>"},{"location":"tools/aws-cli/#aws-cloudshell","title":"AWS CloudShell","text":"<p>AWS Linux instance running in AWS with pre-configured accounts and tools to provide CLI access to AWS services</p>"},{"location":"tools/aws-vault/","title":"AWS Vault","text":"<p>AWS Vault is a tool to securely store and access AWS credentials in a development environment.</p> <p>AWS Vault stores IAM credentials in the operating system secure keystore, generating temporary credentials to the shell and command line applications. Vault is designed to be complementary to the AWS CLI tools and is aware of profiles and configuration in <code>~/.aws/config</code>.</p> <p>Practicalli dotfiles .aws/config</p> <p>practicalli/dotfiles .aws/config file is an example of an AWS Config with profiles and Okta single sign-on</p>"},{"location":"tools/aws-vault/#creating-profiles","title":"Creating profiles","text":"<pre><code>aws-vault exec practicalli-staging-sso -- aws ecr get-login-password\naws-vault exec practicalli-staging-sso -- env | grep AWS\n</code></pre>"},{"location":"tools/docker/","title":"Docker","text":"<p>Docker provides a relatively straightforward container service and had a very wide range of pre-made container images.</p> <p>Docker works best on Linux, although should run on MacOSX and Windows, perhaps with a bit of encouragement.</p> <p>Docker images can be pulled onto a local development environment and used or customised as needed.</p>"},{"location":"tools/docker/#docker-compose","title":"Docker compose","text":"<p>Deploy applications on Amazon ECS using Docker Compose</p>"},{"location":"tools/docker/#building-apps-locally","title":"Building Apps Locally","text":""},{"location":"tools/docker/#leiningen-project","title":"Leiningen project","text":"<pre><code>FROM clojure:openjdk-8-lein-slim-buster\n\nRUN apt-get update\n\nWORKDIR /app\n\nCOPY project.clj .\n\n# We need to fetch all dependencies as otherwise the `lein compile` command will download them anyway\nRUN lein with-profile dev deps\nRUN lein with-profile test deps\n\nCOPY . .\n\nRUN lein compile\n\nCMD lein with-profile prod run -m practicalli.game-statistics.core\n</code></pre>"},{"location":"tools/docker/#database","title":"Database","text":"<pre><code>CREATE ROLE gameadmin LOGIN SUPERUSER PASSWORD 'TrustNo1';\nCREATE DATABASE game-stats\n    WITH\n    OWNER = practicalli;\n</code></pre>"},{"location":"tools/docker/localstack/","title":"Local stack","text":"<p>LocalStack is a cloud service emulator that runs in a single container on your laptop or in your CI environment. With LocalStack, you can run your AWS applications or Lambdas entirely on your local machine without connecting to a remote cloud provider! Whether you are testing complex CDK applications or Terraform configurations, or just beginning to learn about AWS services, LocalStack helps speed up and simplify your testing and development workflow.</p> <p>LocalStack supports a growing number of AWS services, like AWS Lambda, S3, Dynamodb, Kinesis, SQS, SNS, and many more! The Pro version of LocalStack supports additional APIs and advanced features. You can find a comprehensive list of supported APIs on our ballot_box_with_check Feature Coverage page.</p> <p>LocalStack also provides additional features to make your life as a cloud developer easier! Check out LocalStack's Cloud Developer Tools for more information.</p> LocalStack CLIDocker <p>Start localstack in a Docker image using the LocalStack cli</p> <pre><code> % localstack start -d\n</code></pre> <p>The output should look similar to</p> <pre><code>    / /   ____  _________ _/ / ___// /_____ ______/ /__\n   / /   / __ \\/ ___/ __ `/ /\\__ \\/ __/ __ `/ ___/ //_/\n  / /___/ /_/ / /__/ /_/ / /___/ / /_/ /_/ / /__/ ,&lt;\n /_____/\\____/\\___/\\__,_/_//____/\\__/\\__,_/\\___/_/|_|\n\n \ud83d\udcbb LocalStack CLI 1.4.0\n\n[20:22:20] starting LocalStack in Docker mode \ud83d\udc33\n[20:22:21] detaching\n</code></pre> <pre><code>docker run --rm -it -p 4566:4566 -p 4510-4559:4510-4559 localstack/localstack\n</code></pre>"}]}